import espressomd
from p2nfft_common import get_p2nfft_for_config, set_box_and_particles

import sys
import pickle
import argparse


import numpy as np

# Command line
parser = argparse.ArgumentParser(
    description="Get the accuracy achieved by p2nfft for a given particle configuration and p2nfft configuration")
parser.add_argument(
    "--particle_config_file", dest="particle_config_file",  required=True,
   help="File that contians the particle configuration to start from")
parser.add_argument(
    "--p2nfft_config_file", dest="p2nfft_config_file",  required=True,
   help="File that contians the p2nfft configuration, e.g., generated by the tuning")
parser.add_argument(
    "--required_accuracy", dest="required_accuracy", type=float, required=False,
    help="Exit with an error, if the given accuracy is not met.")
args = parser.parse_args()


# Load particle configuration
particles = pickle.load(open(args.particle_config_file))

# Load p2nfft configuration
p2nfft = pickle.load(open(args.p2nfft_config_file))

# Setup Espresso system
s = espressomd.System(box_l=[1,1,1]) # Resizing occurs later
s.periodicity = 0, 0, 0
s.time_step = 0.01
s.cell_system.skin = 0
s.thermostat.turn_off()

# Setup particles
set_box_and_particles(s, particles)

# Setup ;2nfft
s.actors.add(get_p2nfft_for_config(s, p2nfft))

# Calculate
s.integrator.run(0)

# Compare to reference data
n = len(s.part)
err_f = np.sqrt(
    np.sum(np.sum((s.part[:].f - particles["reference_force"])**2, 1), 0) / n)
err_t = np.sqrt(
    np.sum(np.sum((s.part[:].torque_lab - particles["reference_torque"])**2, 1), 0) / n)

print("Rms force error:", err_f)
print("Rms torque error:", err_t)

# Check accuracy requirement, if provided
if not args.required_accuracy is None:
    if not 0.5 * (err_f + err_t) <= args.required_accuracy:
        print("Required accuracy not met.")
        sys.exit(1)
