"""This runs the gel model starting from a thermalized particle configuration
and a p2nfft configuration. A specified external field is applied in the
x-direction.
"""
from __future__ import print_function

import model

from espressomd.constraints import HomogeneousMagneticField

from p2nfft_common import get_p2nfft_for_config, adjust_p2nfft_mesh

import pickle
import sys
from time import time
import argparse

import numpy as np


# Command line
parser = argparse.ArgumentParser(
    description="Run the gel model based on a thermalized particle configuration and a p2nfft configuration")
parser.add_argument(
    "--particle_config_file", dest="particle_config_file",  required=True,
   help="File that contians the particle configuration to start from")
parser.add_argument(
    "--p2nfft_config_file", dest="p2nfft_config_file",  required=True,
   help="File that contians the p2nfft configuration, e.g., generated by the tuning")
parser.add_argument("--field", dest="field", type=float, required=True,
                    help="Strength of the external magnetic field")
parser.add_argument(
    "--start_step", dest="start_step", type=int, default=0, required=False,
    help="Index of the simulation step to start from. Defaults to 0.")
parser.add_argument(
    "--end_step", dest="end_step", type=int, default=10000, required=False,
    help="Index of the simulation step to end at. Defaults to 10000.")
parser.add_argument(
    "--output_base", dest="output_base", default="snapshot_field", required=False,
    help="Bse of output files. The file names are composed as base_<FIELD>_<INDEX>.pcl. Defaults to snapshot_field.")
args = parser.parse_args()


# Instace and setup gel model
g = model.GelModel()
g.setup_system()
g.setup_particles()

# Load and setup particles from the thermalized configuration
particles = pickle.load(open(args.particle_config_file))
# Note: We don't use set_box_and_particles() from p2nfft_common, because
# that clears all particles before adding new ones. Then, we'd loose the
# bonds providing the cross-linking of the network.
for i in range(len(particles["id"])):
    g.s.part[particles["id"][i]].update(
        dict(pos=particles["pos"][i], dip=particles["dip"][i], rotation=(1, 1, 1)))

g.adjust_box_and_shift_system(force=True)

g.s.cell_system.skin = 2

# Setup p2nfft from stored configuration
p2nfft_config = pickle.load(open(args.p2nfft_config_file))
g.s.actors.add(get_p2nfft_for_config(g.s, p2nfft_config))
adjust_p2nfft_mesh(g.s, p2nfft_config)

# Magnetic field
if args.field > 0:
    g.s.constraints.add(HomogeneousMagneticField(H=[args.field, 0, 0]))

# Integration
for i in range(args.start_step, args.end_step, 1):
    start = time()
    g.s.integrator.run(10)
    print(i, (time() - start) / 10, "sec per time step")

    # Intertia tensor to observe shape anisotropy
    I = g.s.analysis.moment_of_inertia_matrix(p_type=0)
    print("  Inertia tensor diagonal", np.diag(I))
    print("  Magnetization:", np.average(g.s.part[:].dip, 0))
    if i % 10 == 0:
        E = g.s.analysis.energy()
        print("  Energy Total:", E["total"], "Non-bonded", E[
              "non_bonded"], "Bonded:", E["bonded"], "Dipolar:", E["dipolar"])

    # Make sure the gel still fits into the simulation box
    old_box = g.s.box_l
    g.adjust_box_and_shift_system()
    if any(np.abs(g.s.box_l - old_box) > 1E-4):
        print("Box size was changed. Adjusting p2nfft mesh")
        adjust_p2nfft_mesh(g.s, p2nfft_config)

    # Save snapshot
    if i % 10 == 0:
        f = open("%s_%g_%04d.pcl" % (args.output_base, args.field, i), "w")
        pickle.dump({
                    "box_l": g.s.box_l,
                    "id": g.s.part[:].id,
                    "pos": g.s.part[:].pos,
                    "dip": g.s.part[:].dip}, f)
        f.close()
